VIM

vim - Vi IMproved, a programmer's text editor

Cheat sheet: https://vim.rtorr.com/

--COMMAND MODE--
# CURSOR MOVEMENT:
h   = left
j   = down
k   = up
l   = right
# These 4 can be combined with a number to move:
25j = down 25 lines

0   = start of line
^   = first non-blank character of line
$   = end of line
w   = next word
e   = end of word
b   = back one word
gg  = first line
G   = last line
7gg = go to line 7
{   = previous paragraph
}   = next paragraph

# SCROLLING:
Ctrl+U = scroll up and move cursor
Ctrl+D = scroll down and move cursor

# EDITING:
u      = undo
Ctrl+R = redo
o      = insert line under cursor and enter insert mode
O      = insert line above cursor and enter insert mode
.      = repeat last command. Useful for repetitive tasks

# DELETING
:dw   = delete word
:2dw  = delete next two words
:de   = delete end of word
:db   = delete beginning of word
:dd   = delete line
:2dd  = delete two lines: 1. current line and 2. line underneath
:1,$d = delete line 1 through end ($)
:x    = delete (cut) current character
:rQ   = replace current character with Q
:di{  = delete inside { }, deletes text between current { and } scope
:di[  = same as above but between [ ]
:da(  = delete ( and ) scope, including '(' and ')'
:%d   = delete all lines

# COPYING (yank) (p=paste)
:yy   = copy current line
:2yy  = copy current line and next line
:yiw  = copy current word (iw = inner word)

# CHANGE (delete and enter insert mode)
:ce   = delete end of word and enter insert mode
:cb   = delete beginning of word and enter insert mode
:cc   = delete line and enter insert mode
:ci{  = change inside { }, deletes text between current { and } scope and enters insert mode

# SAVING & EXITING:
:q  = quit (prompt to save)
:q! = quit without saving
:w  = write (save)
:wq = write and quit
:x  = write and quit

--INSERT MODE--
Ctrl+C = exit insert mode
Escape = exit insert mode
i = insert mode
a = insert (append) after cursor

--VISUAL MODE-- (selects text)
v = enter visual mode
Many of the regular cursor movement commands function the same in Visual mode.

--VISUAL BLOCK MODE-- (selects text block)
Ctrl+V = enter visual block mode

# SUBSTITUTE (s) (used for find/replace):
Syntax:
$ :[range]s/{pattern}/{string}/[flags] [count]

Options:
g = global
i = case insensitive
c = confirmation

# Replace all occurrences of 'print' on current line with 'printf':
:s/print/printf/g

# Replace entire document using '%' symbol:
:%s/print/printf/g

# Delete all occurrences of 'printf' on current line by using empty replacement:
:s/printf//g

# Substitute (find/replace) 'line' with 'newline' in selection:
# - Make a selection
# - Press ':'. This opens a command prompt with default: :'<,'>
# - Enter your substitute command: :'<,'>s/line/newline/g

# Special characters: `^$.*[~)+/
# ^These characters need to be escaped in vim substitute.
# Add underscore after all digits:
# Pattern: (\d+)  # '+', '(', and ')' need to be escaped
# Replace: \1_    # \1 is the first capture group
:%s/\(\d\+\)/\1_/g


# SET COMMANDS:
:set noexpandtab # use tabs instead of spaces
:set number # set line numbers
:set nonumber # disable line numbers
---