FIND
find - search for files in a directory hierarchy

# Case sensitive recursive find in pwd (.) for file names containing 'hello':
$ find . -name *hello*

# Get number of files with .h or .c extension:
$ find /usr/include -name '*.[hc]' | wc
  8085        8085        378708
newlines | word count | characters
'find' outputs file paths, so this means there are 8085 files (first col)

# Case insensitive find for file names containing 'hello':
$ find . -iname *hello*

MTIME - modification time
+2 = more than 2
-2 = less than 2
2  = exactly 2

# Find all files modified within last 1 day:
$ find . -mtime -2

# Find all files modified more than 3 days ago:
$ find . -mtime +3

PERM - search file permissions
# Find executable (+x) files:
$ find . -perm -+x

EXECUTABLE - search for executable files
# Find executable files and directories:
# (directories are executable if they are listable)
$ find /usr/bin -executable | wc -l
3093

# Find executable files only:
$ find /usr/bin -executable -type f | wc -l
3093

SIZE - search file sizes
c = byes suffix
# Find all files larger than 1000 bytes:
$ find . -size +1000c
# Find all files larger than 1 GB:
$ find / -size +1G 2> /dev/null

# Find zero byte files:
$ find . -size 0c

USER - search file owner
# Find all files owned by 'root':
$ find . -user 'root'

TYPE - search file type.
f = plaintext, d = directory, l = symbolic link

# Find all directories:
$ find . -type d

# Find all symbolic links:
$ touch a.txt
$ ln -s a.txt a.lnk
$ find . -type l -ls
2752605   0 lrwxrwxrwx  1 kali  5 Mar 25 16:06 ./a.lnk -> a.txt

MAXDEPTH - stop at a specified recursion depth:
$ find /usr -maxdepth 1
/usr
/usr/games
/usr/local
<...>

# -print0 = print name followed by a null byte.
# Useful to process file names containing whitespace characters.
# Often used on conjunction with 'xargs -0':
$ touch 'a 1' 'a\n2'
$ find -print0
../a 1./a\n2

# Use hexdump to see the two null bytes (0x00):
$ find -print0 | hd
2e 00 2e 2f 61 20 31 00  2e 2f 61 5c 6e 32 00     |.../a 1../a\n2.|


--EXEC--
# Syntax.
# {}: placeholder for the result found
# \; = command delimiter ('\' is used to escape the semicolon):
$ find <find_cmd> -exec <exec_cmd> {} \;

# Find zero byte files then call 'ls -la' on each one:
$ find . -size 0c -exec ls -la {} \;

# Simpler syntax using xargs: $ find . -size 0c | xargs ls -la

# Use -exec placeholder to rename files.
# {} is mapped to {}_renamed, thus adding '_renamed' suffix all file names:
$ touch file1 file2 file3
$ find . -name 'file*' -exec mv {} {}_renamed \;
$ ls
file1_renamed  file2_renamed ...

# Alt syntax using xargs:
# find -name 'file*' | xargs -I{} mv {} {}_renamed

# COMMAND DELIMITER
# Two delimiters exist: \; and +

# \; example:
# Calls grep N times, one for each result: grep result1; grep result2; ...
$ find . -type f -exec grep 'hello' {} \;

# + example:
# Calls grep one time and passes in all results: grep result1 result2 result2 ...
$ find . -type f -exec grep 'hello' {} +

---